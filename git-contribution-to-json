#!python3

from git import Repo
import json
import argparse
import time

def get_tracked_files(trees):
 paths = []
 for tree in trees:  
  for blob in tree.blobs:
   paths.append(blob.abspath)
  if tree.trees:
   paths.extend(get_tracked_files(tree.trees))
 return paths

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Get contributions for current git HEAD')
    parser.add_argument("-p", help="Prints output to stdout instead of file", action="store_true")
    parser.add_argument("-f", "--file", default=None, help="Get contribution for single file", nargs=1)
    parser.add_argument("-o", "--output", default=None, help="Allows specification of output file name")
    args = parser.parse_args()

    repo = Repo('.')
    branch = repo.active_branch

    if args.file:
        files_to_check = [args.file[0]]
    else:
        files_to_check = get_tracked_files([repo.tree()])

    blames = dict()
    for f in files_to_check :
        blames[f] = dict()
        for commit, lines in repo.blame('HEAD', f):
            author = commit.author.name
            real_lines = [x for x in lines if len(x) > 0]
            try:
                blames[f][author] += len(real_lines)
            except KeyError:
                blames[f][author] = len(real_lines)

    if args.p:
        print(json.dumps(blames))
    else:
        if args.output:
            output_name = args.output
        else:
            output_name = 'git_contributions.json'

        with open(output_name,'w') as f:
            json.dump(blames, f)

        print('./%s generated' % output_name)
